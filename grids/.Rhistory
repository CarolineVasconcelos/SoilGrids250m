install.packages("## Not run:")
set.seed(42)
models <- caretList(iris[1:50,1:2], iris[1:50,3], methodList=c('glm', 'lm'))
ens <- caretEnsemble(models)
install.packages("caretEnsemble")
chooseCRANmirror()
install.packages("caretEnsemble")
library("caretEnsemble")
library(plotKML)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
data(eberg)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
ov <- over(eberg_grid, eberg)
str(ov)
ov <- over(eberg, eberg_grid)
str(ov)
names(eberg)
m <- cbind(eberg@data[,"TAXGRSC"], ov)
?caretList
check_caretList_classes(list_of_models)
library(caretEnsemble)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
models <- caretList(x=m[,1:5], y=m[,6], methodList=c('nnet', 'rf', 'svmRadial'))
summary(m$TAXGRSC)
m$TAXGRSC <- as.factor(m$TAXGRSC)
m <- cbind(eberg@data[,"TAXGRSC"], ov)
str(m)
m <- cbind(eberg@data[["TAXGRSC"]], ov)
str(m)
m <- cbind(eberg@data["TAXGRSC"], ov)
str(m)
summary(m$TAXGRSC)
m <- m[complete.cases(m),]
str(m)
m <- cbind(ov, eberg@data["TAXGRSC"])
m <- m[complete.cases(m),]
?grep
i = levels(m$TAXGRSC)[1]
i
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
sel <- grep(pattern=i, m$TAXGRSC)
str(sel)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
warnings()
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
m <- m[complete.cases(m),]
str(m)
m$soiltype <- as.factor(m$soiltype)
models <- caretList(x=m[,1:5], y=m$soiltype, methodList=c('nnet', 'rf', 'svmRadial'))
s <- sample(m$soiltype, 500)
str(s)
?sample
rm(s)
m.s <- sample(m, 500)
s <- sample.int(m, 500)
s <- sample.int(nrow(m), 500)
str(s)
models <- caretList(x=m[s,1:5], y=m$soiltype[s], methodList=c('nnet', 'rf', 'svmRadial'))
ctrl <- trainControl(method="repeatedcv", repeats = 3)
ctrl <- trainControl(method="repeatedcv", repeats = 3)
s <- sample.int(nrow(m), 500)
models <- caretList(x=m[s,1:5], y=m$soiltype[s], methodList=c('nnet', 'rf', 'svmRadial'), trControl=ctrl)
str(models)
ctrl <- trainControl(method="repeatedcv", repeats = 5)
s <- sample.int(nrow(m), 300)
str(m[s,1:5])
s <- sample.int(nrow(m), 500)
ctrl <- trainControl(method="repeatedcv", repeats = 5)
models <- caretList(x=m[s,1:4], y=m$soiltype[s], methodList=c('nnet', 'rf', 'svmRadial'), trControl=ctrl)
models <- caretList(x=m[s,1:4], y=m$soiltype[s], methodList=c('rf', 'svmRadial'), trControl=ctrl)
library(kernlab)
str
str(models)
models <- caretList(x=m[s,1:4], y=m$soiltype[s], methodList=c('rf', 'svmRadial'), trControl=ctrl)
traceback()
models <- caretList(x=m[s,1:4], y=m$soiltype[s], methodList=c('rf', 'nnet'), trControl=ctrl)
?rbind.fill
ens <- caretEnsemble(models)
x <- predict(ens, newdata=m, type="probs", na.action = na.pass)
TAXGRSC.rf <- randomForest(m[,1:4], y=m$soiltype)
names(m)
TAXGRSC.mn <- multinom(soiltype~PRMGEO6+DEMSRT6+TWISRT6+TIRAST6, m)
TAXGRSC.svm <- svm(soiltype~PRMGEO6+DEMSRT6+TWISRT6+TIRAST6, m)
library(e1071)
TAXGRSC.svm <- svm(soiltype~PRMGEO6+DEMSRT6+TWISRT6+TIRAST6, m)
probs1 <- predict(TAXGRSC.mn, eberg_grid@data, type="probs", na.action = na.pass)
probs2 <- predict(TAXGRSC.rf, eberg_grid@data, type="prob", na.action = na.pass)
probs2 <- predict(TAXGRSC.svm, eberg_grid@data, type="prob", na.action = na.pass)
lt <- list(probs1, probs2, probs3)
probs2 <- predict(TAXGRSC.rf, eberg_grid@data, type="prob", na.action = na.pass)
probs3 <- predict(TAXGRSC.svm, eberg_grid@data, type="prob", na.action = na.pass)
lt <- list(probs1, probs2, probs3)
probs <- Reduce("+", lt) / length(lt)
str(probs1)
str(probs2)
str(probs3)
probs3 <- predict(TAXGRSC.svm, eberg_grid@data, type="probs", na.action = na.pass)
str(probs3)
probs3 <- predict(TAXGRSC.svm, eberg_grid@data, probability=TRUE, na.action = na.pass)
TAXGRSC.svm <- svm(soiltype~PRMGEO6+DEMSRT6+TWISRT6+TIRAST6, m, probability = TRUE)
probs3 <- predict(TAXGRSC.svm, eberg_grid@data, probability=TRUE, na.action = na.pass)
str(probs3)
str(probs2)
str(probs1)
probs <- Reduce("+", lt) / length(lt)
lt <- list(probs1, probs2, probs3)
probs <- Reduce("+", lt) / length(lt)
str(probs3)
lt <- list(probs1, probs2, attr(probs3, "probabilities"))
str(lt)
probs <- Reduce("+", lt) / length(lt)
eberg_soiltype = eberg_grid
eberg_soiltype@data <- probs
eberg_soiltype@data <- data.frame(probs)
plot(stack(eberg_soiltype))
plot(raster::stack(eberg_soiltype))
TAXGRSC.svm
TAXGRSC.mn
TAXGRSC.rf
plot(raster::stack(eberg_soiltype))
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,0.6))
eberg_soiltype@data <- data.frame(probs1)
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,0.6))
eberg_soiltype@data <- data.frame(probs2)
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,0.6))
eberg_soiltype@data <- data.frame(attr(probs3, "probabilities"))
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,0.6))
?svm
eberg_soiltype@data <- data.frame(probs)
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,1))
eberg_soiltype@data <- data.frame(probs2)
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,1))
eberg_soiltype@data <- data.frame(probs1)
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,1))
eberg_soiltype@data <- data.frame(attr(probs3, "probabilities"))
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,1))
eberg_soiltype = eberg_grid
eberg_soiltype@data <- data.frame(probs)
str(rowSums(eberg_soiltype@data))
summary(rowSums(eberg_soiltype@data)==1)
ch <- rowSums(eberg_soiltype@data)
summary(ch)
?randomForest
TAXGRSC.svm <- svm(soiltype~PRMGEO6+DEMSRT6+TWISRT6+TIRAST6, m, probability = TRUE, cross=5)
TAXGRSC.svm
str(TAXGRSC.svm)
TAXGRSC.svm$accuracies
TAXGRSC.svm$tot.accuracy
s <- sample.int(nrow(m), 500)
TAXGRSC.rf <- randomForest(x=m[-s,1:4], y=m$soiltype[-s], xtest=m[s,1:4], ytest=m$soiltype[s])
TAXGRSC.rf
str(TAXGRSC.rf)
TAXGRSC.rf$test$confusion
TAXGRSC.rf$test$confusion[,"class.error"]
TAXGRSC.rf$test$confusion[,"class.error"]
str(TAXGRSC.svm)
library(e1071)
set.seed(42)
TAXGRSC.rf$test$confusion[,"class.error"]
2*20*5
?sqrt
(2*20*5)^1/3
(2*20*5)^1/3
(2*20*5)^-1/3
(2*20*5)^1/3
mean(2+20+5)
mean(c(2,20,5))
3/(1/2+1/20+1/5)
?randomForest
str(m)
plot.svm(TAXGRSC.svm)
library(e1071)
plot.svm(TAXGRSC.svm)
plot(TAXGRSC.svm)
?plot.svm
plot(TAXGRSC.svm, data=m)
plot(TAXGRSC.svm, data=m, soiltype~PRMGEO6+DEMSRT6+TWISRT6+TIRAST6)
plot(TAXGRSC.svm, data=m, soiltype~DEMSRT6)
TAXGRSC.svm
plot(TAXGRSC.svm, data=m, soiltype~DEMSRT6)
plot(TAXGRSC.svm, data=m)
library(classyfire)
install.packages("classyfire")
library(classyfire)
ens <- cfBuild(inputData=m[,1:4], inputClass=m$soiltype, bootNum=8, ensNum=8, parallel=TRUE, cpus=8, type="SOCK", probability=TRUE)
?spc
library(GSIF)
?spc
eberg_spc <- spc(eberg_grid, ~ PRMGEO6+DEMSRT6+TWISRT6+TIRAST6)
ov <- over(eberg, cbind(eberg_grid, eberg_spc))
str(eberg_spc)
eberg_grid@data <- cbind(eberg_grid@data, eberg_spc@predicted@data)
ov <- over(eberg, eberg_grid)
m <- cbind(ov, eberg@data["TAXGRSC"])
summary(m$TAXGRSC)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
levels(m$TAXGRSC)
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
m$soiltype <- as.factor(m$soiltype)
str(m)
ens <- cfBuild(inputData=m[,paste0("PC", 1:9)], inputClass=m$soiltype, bootNum=8, ensNum=8, parallel=TRUE, cpus=8, type="SOCK", probability=TRUE)
TAXGRSC.svm <- svm(soiltype~PRMGEO6+DEMSRT6+TWISRT6+TIRAST6, m, probability = TRUE, cross=5)
lt <- list(probs1, probs2)
probs <- Reduce("+", lt) / length(lt)
eberg_soiltype = eberg_grid
eberg_soiltype@data <- data.frame(probs)
ch <- rowSums(eberg_soiltype@data)
summary(ch)
plot(raster::stack(eberg_soiltype), col=SAGA_pal[[1]], zlim=c(0,1))
q()
load("G:\\soilstorage\\SoilData\\LUCAS\\.RData_conflict-20130922-110039")
source(.trPaths[5], echo=TRUE, max.deparse.length=150)
save(SPROPS.LUCAS, file="SPROPS.LUCAS.rda")
q()
setwd("G:/tmp")
library(plotKML)
library(sp)
library(snowfall)
library(GSIF)
library(rgdal)
data(eberg)
coordinates(eberg) <- ~X+Y
proj4string(eberg) <- CRS("+init=epsg:31467")
## plot using tiles:
shape = "http://maps.google.com/mapfiles/kml/pal2/icon18.png"
tiles.p <- kml.tiles(eberg["SNDMHT_A"], block.x=0.05,
size=0.8, z.lim=c(20,50), colour=SNDMHT_A, shape=shape,
labels=SNDMHT_A, return.list=TRUE)
library(spatstat)
if(interactive()) {
opa <- par(mfrow=c(1,2))
plot(density(cells, 0.05))
plot(density(cells, 0.05, diggle=TRUE))
par(opa)
298 density.psp
v <- diag(c(0.05, 0.07)^2)
plot(density(cells, varcov=v))
}
# automatic bandwidth selection
plot(density(cells, sigma=bw.diggle(cells)))
# equivalent:
plot(density(cells, bw.diggle))
# evaluate intensity at points
density(cells, 0.05, at="points")
points(cells)
?density.ppx
?density.ppp
data(burkitt)
b3d <- kernel3d(burpts, burkitt$t, seq(250,350,10), seq(250, 400, 10),
seq(365,5800,365), 30, 200)
brks <- quantile(b3d$v, seq(0,1,0.05))
cols <- heat.colors(length(brks)-1)
oldpar <- par(mfrow=c(3,5))
for (i in 1:15) image(seq(250,350,10), seq(250, 400, 10), b3d$v[,,i],
asp=1, xlab="", ylab="", main=1960+i, breaks=brks, col=cols)
par(oldpar)
library(splancs)
data(burkitt)
b3d <- kernel3d(burpts, burkitt$t, seq(250,350,10), seq(250, 400, 10),
seq(365,5800,365), 30, 200)
brks <- quantile(b3d$v, seq(0,1,0.05))
cols <- heat.colors(length(brks)-1)
oldpar <- par(mfrow=c(3,5))
for (i in 1:15) image(seq(250,350,10), seq(250, 400, 10), b3d$v[,,i],
asp=1, xlab="", ylab="", main=1960+i, breaks=brks, col=cols)
par(oldpar)
str(b3d)
str(NuonClean01)
int <- intensity.ppx(NuonClean01.ppx)
int <- intensity(NuonClean01.ppx)
?density
require(graphics)
plot(density(c(-20, rep(0,98), 20)), xlim = c(-4, 4))  # IQR = 0
# The Old Faithful geyser data
d <- density(faithful$eruptions, bw = "sj")
d
plot(d)
plot(d, type = "n")
polygon(d, col = "wheat")
## Missing values:
x <- xx <- faithful$eruptions
x[i.out <- sample(length(x), 10)] <- NA
doR <- density(x, bw = 0.15, na.rm = TRUE)
lines(doR, col = "blue")
points(xx[i.out], rep(0.01, 10))
plot(doR)
## Weighted observations:
fe <- sort(faithful$eruptions) # has quite a few non-unique values
## use 'counts / n' as weights:
dw <- density(unique(fe), weights = table(fe)/length(fe), bw = d$bw)
utils::str(dw) ## smaller n: only 126, but identical estimate:
stopifnot(all.equal(d[1:3], dw[1:3]))
## simulation from a density() fit:
# a kernel density fit is an equally-weighted mixture.
fit <- density(xx)
N <- 1e6
x.new <- rnorm(N, sample(xx, size = N, replace = TRUE), fit$bw)
plot(fit)
lines(density(x.new), col = "blue")
q()
x=c(1,3,2,1,5,5)
which.max(x)
which.max(x)
?which.max
x=c(5,1,3,2,1,5,5)
which.max(x)
setwd("G:/SoilGrids250m/")
lst.R <- list.files("G:\\soilstorage\\SoilData\\", pattern=glob2rx("rw_*.R$"), recursive = TRUE, full.names = TRUE)
#lst.R <- lst.R[-grep(pattern="extra.R", lst.R)]
lst.R <- lst.R[-grep(pattern="CSIRO", lst.R)]
lst.R <- lst.R[-grep(pattern="NAFORMA", lst.R)]
lst.R <- lst.R[-grep(pattern="IRNSPD", lst.R)]
View(lst.R)
update.file <- function(x, path){
## create dir if missing:
out.dir = paste0(path, basename(dirname(x)))
if(!file.exists(out.dir)){ dir.create(path=out.dir) }
## copy file:
file.copy(from=x, to=paste0(out.dir, "/", basename(x)), overwrite = TRUE, copy.date = TRUE)
}
x = sapply(lst.R, update.file, path="D:/git/SoilGrids250m/profiles/")
## copy all files from the server:
setwd("D:/git/SoilGrids250m/grids")
