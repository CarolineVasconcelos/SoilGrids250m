data(eberg)
coordinates(eberg) <- ~X+Y
proj4string(eberg) <- CRS("+init=epsg:31467")
## plot using tiles:
shape = "http://maps.google.com/mapfiles/kml/pal2/icon18.png"
tiles.p <- kml.tiles(eberg["SNDMHT_A"], block.x=0.05,
size=0.8, z.lim=c(20,50), colour=SNDMHT_A, shape=shape,
labels=SNDMHT_A, return.list=TRUE)
library(spatstat)
if(interactive()) {
opa <- par(mfrow=c(1,2))
plot(density(cells, 0.05))
plot(density(cells, 0.05, diggle=TRUE))
par(opa)
298 density.psp
v <- diag(c(0.05, 0.07)^2)
plot(density(cells, varcov=v))
}
# automatic bandwidth selection
plot(density(cells, sigma=bw.diggle(cells)))
# equivalent:
plot(density(cells, bw.diggle))
# evaluate intensity at points
density(cells, 0.05, at="points")
points(cells)
?density.ppx
?density.ppp
data(burkitt)
b3d <- kernel3d(burpts, burkitt$t, seq(250,350,10), seq(250, 400, 10),
seq(365,5800,365), 30, 200)
brks <- quantile(b3d$v, seq(0,1,0.05))
cols <- heat.colors(length(brks)-1)
oldpar <- par(mfrow=c(3,5))
for (i in 1:15) image(seq(250,350,10), seq(250, 400, 10), b3d$v[,,i],
asp=1, xlab="", ylab="", main=1960+i, breaks=brks, col=cols)
par(oldpar)
library(splancs)
data(burkitt)
b3d <- kernel3d(burpts, burkitt$t, seq(250,350,10), seq(250, 400, 10),
seq(365,5800,365), 30, 200)
brks <- quantile(b3d$v, seq(0,1,0.05))
cols <- heat.colors(length(brks)-1)
oldpar <- par(mfrow=c(3,5))
for (i in 1:15) image(seq(250,350,10), seq(250, 400, 10), b3d$v[,,i],
asp=1, xlab="", ylab="", main=1960+i, breaks=brks, col=cols)
par(oldpar)
str(b3d)
str(NuonClean01)
int <- intensity.ppx(NuonClean01.ppx)
int <- intensity(NuonClean01.ppx)
?density
require(graphics)
plot(density(c(-20, rep(0,98), 20)), xlim = c(-4, 4))  # IQR = 0
# The Old Faithful geyser data
d <- density(faithful$eruptions, bw = "sj")
d
plot(d)
plot(d, type = "n")
polygon(d, col = "wheat")
## Missing values:
x <- xx <- faithful$eruptions
x[i.out <- sample(length(x), 10)] <- NA
doR <- density(x, bw = 0.15, na.rm = TRUE)
lines(doR, col = "blue")
points(xx[i.out], rep(0.01, 10))
plot(doR)
## Weighted observations:
fe <- sort(faithful$eruptions) # has quite a few non-unique values
## use 'counts / n' as weights:
dw <- density(unique(fe), weights = table(fe)/length(fe), bw = d$bw)
utils::str(dw) ## smaller n: only 126, but identical estimate:
stopifnot(all.equal(d[1:3], dw[1:3]))
## simulation from a density() fit:
# a kernel density fit is an equally-weighted mixture.
fit <- density(xx)
N <- 1e6
x.new <- rnorm(N, sample(xx, size = N, replace = TRUE), fit$bw)
plot(fit)
lines(density(x.new), col = "blue")
q()
list.of.packages <- c("nnet", "plyr", "ROCR", "randomForest", "plyr", "parallel", "psych", "mda", "h2o", "dismo", "grDevices", "snowfall", "hexbin", "lattice", "ranger", "xgboost")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
install.packages("caret")
file.path(chartr("\\", "/", R.home()), "library")
.libPaths()
file.path(chartr("\\", "/", R.home()), "library")
.libPaths(file.path(chartr("\\", "/", R.home()), "library"))
install.packages("plotKML")
install.packages("gstat")
.libPaths(file.path(chartr("\\", "/", R.home()), "library"))
.libPaths()
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
## Cross-validation example
## by: Tom.Hengl@isric.org, Maria.RuiperezGonzales@wur.nl and Gerard.Heuvelink@wur.nl
library(sp)
library(randomForest)
library(nnet)
library(plotKML)
library(GSIF)
library(plyr)
library(ROCR)
library(snowfall)
library(mda)
library(psych)
library(hexbin)
library(gridExtra)
library(lattice)
library(grDevices)
library(h2o)
library(scales)
source("cv_functions.R")
## load the data
set.seed(42)
data(eberg)
data(eberg_grid)
coordinates(eberg) <- ~X+Y
proj4string(eberg) <- CRS("+init=epsg:31467")
gridded(eberg_grid) <- ~x+y
proj4string(eberg_grid) <- CRS("+init=epsg:31467")
eberg_spc <- spc(eberg_grid, ~ PRMGEO6+DEMSRT6+TWISRT6+TIRAST6)
eberg_grid@data <- cbind(eberg_grid@data, eberg_spc@predicted@data)
## overlay points and grids:
ov <- over(eberg, eberg_grid)
m <- cbind(ov, eberg@data)
## clean-up target variable:
summary(m$TAXGRSC)
m$soiltype <- NA
for(i in levels(m$TAXGRSC)){
sel <- grep(pattern=i, m$TAXGRSC)
if(length(sel)>5){
m$soiltype[sel] <- i
}
}
## regression matrix:
m <- m[complete.cases(m[,1:(ncol(eberg_grid)+2)]),]
m$soiltype <- as.factor(m$soiltype)
cov.lst <- paste0("PC", 1:11)
## Cross-validation factor-type variable:
formulaString = as.formula(paste('soiltype ~ ', paste(cov.lst, collapse="+")))
test.CLASS <- cv_factor(formulaString, rmatrix=m, nfold=5, idcol="ID")
str(test.CLASS)
test.CLASS[["Classes"]]
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
test.CLASS <- cv_factor(formulaString, rmatrix=m, nfold=5, idcol="ID")
View(cv_factor)
j=1
nfold=5
rmatrix=mP
rmatrix=m
idcol="ID"
varn <- all.vars(formulaString)[1]
sel <- dismo::kfold(rmatrix, k=nfold, by=rmatrix[,varn])
s.train <- rmatrix[!sel==j,]
s.test <- rmatrix[sel==j,]
n.l <- plyr::count(s.test[,varn])
n.l <- data.frame(matrix(n.l$freq, nrow=1, dimnames = list(1, paste(n.l$x))))
gm1 <- nnet::multinom(formulaString, s.train, MaxNWts = MaxNWts)
MaxNWts = 19000
gm1 <- nnet::multinom(formulaString, s.train, MaxNWts = MaxNWts)
gm1
str(gm1)
gm2 <- randomForest(formulaString, data=s.train)
gm2
str(gm2)
gm2$importance
gm2 <- ranger(formulaString, data=s.train)
library(ranger)
library(xgboost)
gm2 <- ranger(formulaString, data=s.train)
gm2$prediction.error
gm2.w <- 1-gm2$prediction.error
gm2.w
gm1
ctrl <- trainControl("boot",number=1)
library(caret)
source("cv_functions.R")
getwd()
setwd("D:/git/SoilGrids250m/grids/cv")
source("cv_functions.R")
ctrl <- trainControl("boot",number=1)
gm1 <- caret::train(formulaString, data=s.train, method="multinom", trControl=ctrl, MaxNWts = MaxNWts, na.action=na.omit)
?trainControl
ctrl <- trainControl("boot",number=1,repeats=2)
gm1 <- caret::train(formulaString, data=s.train, method="multinom", trControl=ctrl, MaxNWts = MaxNWts, na.action=na.omit)
ctrl <- trainControl("cv",number=1,repeats=2)
gm1 <- caret::train(formulaString, data=s.train, method="multinom", trControl=ctrl, MaxNWts = MaxNWts, na.action=na.omit)
ctrl <- trainControl("cv",number=2,repeats=2)
gm1 <- caret::train(formulaString, data=s.train, method="multinom", trControl=ctrl, MaxNWts = MaxNWts, na.action=na.omit)
ctrl <- trainControl("cv",repeats=3)
gm1 <- caret::train(formulaString, data=s.train, method="multinom", trControl=ctrl, MaxNWts = MaxNWts, na.action=na.omit)
ctrl <- trainControl("cv",repeats=1)
gm1 <- caret::train(formulaString, data=s.train, method="multinom", trControl=ctrl, MaxNWts = MaxNWts, na.action=na.omit)
ctrl <- trainControl(method="repeatedcv", number=3, repeats=1)
gm1 <- caret::train(formulaString, data=s.train, method="multinom", trControl=ctrl, MaxNWts = MaxNWts, na.action=na.omit)
ctrl <- trainControl(method="none")
gm1 <- caret::train(formulaString, data=s.train, method="multinom", trControl=ctrl, MaxNWts = MaxNWts, na.action=na.omit)
ctrl <- trainControl(method="none")
gm1 <- caret::train(formulaString, data=s.train, method="multinom", trControl=ctrl, MaxNWts = MaxNWts, tuneGrid=data.frame(decay=0.1), na.action=na.omit)
gm1$results$Accuracy
ctrl <- trainControl(method="repeatedcv", repeats=2, number=2)
gm1 <- caret::train(formulaString, data=s.train, method="multinom", trControl=ctrl, MaxNWts = MaxNWts, na.action=na.omit)
ctrl <- trainControl(method="cv", repeats=2, number=2)
gm1 <- caret::train(formulaString, data=s.train, method="multinom", trControl=ctrl, MaxNWts = MaxNWts, na.action=na.omit)
ctrl <- trainControl(method="cv", repeats=2, number=1)
gm1 <- caret::train(formulaString, data=s.train, method="multinom", trControl=ctrl, MaxNWts = MaxNWts, tuneGrid=data.frame(decay=c(0.1)), na.action=na.omit)
getModelInfo(model="multinom")
ctrl <- trainControl(method="cv", repeats=2, number=1)
gm1 <- caret::train(formulaString, data=s.train, method="multinom", trControl=ctrl, MaxNWts = MaxNWts, tuneGrid=data.frame(decay=c(0,0.1)), na.action=na.omit)
gm1 <- nnet::multinom(formulaString, data=s.train, MaxNWts = MaxNWts)
gm1.w <- postResample(s.train[,all.vars(formulaString)[1]], predict(gm1, s.test, na.action = na.pass))
gm1.w
str(s.train[,all.vars(formulaString)[1]])
gm1.w <- postResample(s.train[,all.vars(formulaString)[1]], predict(gm1, s.train, na.action = na.pass))
gm1.w <- postResample(s.train[,all.vars(formulaString)[1]], predict(gm1, s.train, na.action = na.pass))[1]
gm2 <- ranger(formulaString, data=s.train)
gm2.w <- 1-gm2$prediction.error
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
## load the data
set.seed(42)
data(eberg)
data(eberg_grid)
coordinates(eberg) <- ~X+Y
proj4string(eberg) <- CRS("+init=epsg:31467")
gridded(eberg_grid) <- ~x+y
proj4string(eberg_grid) <- CRS("+init=epsg:31467")
eberg_spc <- spc(eberg_grid, ~ PRMGEO6+DEMSRT6+TWISRT6+TIRAST6)
eberg_grid@data <- cbind(eberg_grid@data, eberg_spc@predicted@data)
## overlay points and grids:
ov <- over(eberg, eberg_grid)
m <- cbind(ov, eberg@data)
## clean-up target variable:
summary(m$TAXGRSC)
m$soiltype <- NA
for(i in levels(m$TAXGRSC)){
sel <- grep(pattern=i, m$TAXGRSC)
if(length(sel)>5){
m$soiltype[sel] <- i
}
}
## regression matrix:
m <- m[complete.cases(m[,1:(ncol(eberg_grid)+2)]),]
m$soiltype <- as.factor(m$soiltype)
cov.lst <- paste0("PC", 1:11)
formulaString = as.formula(paste('soiltype ~ ', paste(cov.lst, collapse="+")))
test.CLASS <- cv_factor(formulaString, rmatrix=m, nfold=5, idcol="ID")
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
formulaString = as.formula(paste('soiltype ~ ', paste(cov.lst, collapse="+")))
test.CLASS <- cv_factor(formulaString, rmatrix=m, nfold=5, idcol="ID")
snowfall::sfStop()
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
formulaString = as.formula(paste('soiltype ~ ', paste(cov.lst, collapse="+")))
test.CLASS <- cv_factor(formulaString, rmatrix=m, nfold=5, idcol="ID")
snowfall::sfStop()
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
test.CLASS <- cv_factor(formulaString, rmatrix=m, nfold=5, idcol="ID")
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
test.CLASS <- cv_factor(formulaString, rmatrix=m, nfold=5, idcol="ID")
str(test.CLASS)
test.CLASS[["Classes"]]
str(test.CLASS, max.level = 2)
test.CLASS[["Purity"]]
str(test.CLASS, max.level = 1)
varn <- all.vars(formulaString)[1]
sel <- dismo::kfold(rmatrix, k=nfold, by=rmatrix[,varn])
snowfall::sfInit(parallel=TRUE, cpus=cpus)
snowfall::sfExport("ensemble.predict","idcol","formulaString","rmatrix","sel","varn","predict_parallel")
snowfall::sfLibrary(package="ROCR", character.only=TRUE)
snowfall::sfLibrary(package="nnet", character.only=TRUE)
snowfall::sfLibrary(package="plyr", character.only=TRUE)
snowfall::sfLibrary(package="ranger", character.only=TRUE)
snowfall::sfLibrary(package="caret", character.only=TRUE)
out <- snowfall::sfLapply(1:nfold, function(j){predict_parallel(j, sel=sel, varn=varn, formulaString=formulaString, rmatrix=rmatrix, idcol=idcol)})
snowfall::sfStop()
N.tot <- plyr::rbind.fill(lapply(out, function(x){x[["n.l"]]}))
N.tot <- colSums(N.tot)
mean.error <- plyr::rbind.fill(lapply(out, function(x){x[["error.l"]]}))
mean.error <- colSums(mean.error)/N.tot
error <- plyr::rbind.fill(lapply(out, function(x){x[["error"]]}))
obs <- plyr::rbind.fill(lapply(out, function(x){ as.data.frame(x[["obs.pred"]][[1]])}))
pred <- plyr::rbind.fill(lapply(out, function(x){ as.data.frame(x[["obs.pred"]][[2]])}))
cl <- parallel::makeCluster(getOption("cl.cores", cpus))
cpus=nfold
cl <- parallel::makeCluster(getOption("cl.cores", cpus))
ranks.pred <- parallel::parApply(cl, pred, MARGIN=1, which.max)
ranks.obs <- parallel::parApply(cl, obs, MARGIN=1, which.max)
parallel::stopCluster(cl)
cf <- mda::confusion(names(obs)[ranks.obs], names(pred)[ranks.pred])
c.kappa <- psych::cohen.kappa(cf)
str(cf)
class(cf)
?psych::cohen.kappa
cf
c.kappa <- psych::cohen.kappa(cbind(names(obs)[ranks.obs], names(pred)[ranks.pred]))
purity <- sum(diag(cf))/sum(cf)*100
c.kappa
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
test.CLASS <- cv_factor(formulaString, rmatrix=m, nfold=5, idcol="ID")
str(test.CLASS)
test.CLASS[["Classes"]]
test.CLASS[["Purity"]]
test.CLASS[["Confusion.matrix"]]
ovP <- over(eberg, eberg_grid)
mP <- cbind(ovP, eberg@data)
## clean-up target variable:
summary(m$SNDMHT_A)
mP <- na.omit(mP)
formulaStringP = as.formula(paste('SNDMHT_A ~ ', paste(cov.lst, collapse="+")))
test.prop <- cv_numeric(formulaStringP, rmatrix=mP, nfold=5, idcol="ID")
?
registerDoParallel
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
test.prop <- cv_numeric(formulaStringP, rmatrix=mP, nfold=5, idcol="ID")
library(doParallel)
source("cv_functions.R")
test.prop <- cv_numeric(formulaStringP, rmatrix=mP, nfold=5, idcol="ID")
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
test.prop <- cv_numeric(formulaStringP, rmatrix=mP, nfold=5, idcol="ID")
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
test.prop <- cv_numeric(formulaStringP, rmatrix=mP, nfold=5, idcol="ID")
str(test.prop)
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
data(edgeroi)
edgeroi.spc <- join(edgeroi$sites, edgeroi$horizons, type='inner')
coordinates(edgeroi.spc) <- ~ LONGDA94 + LATGDA94
proj4string(edgeroi.spc) <- CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs")
edgeroi.spc <- spTransform(edgeroi.spc, CRS("+init=epsg:28355"))
## load the 250 m grids:
con <- url("http://gsif.isric.org/lib/exe/fetch.php?media=edgeroi.grids.rda")
load(con)
gridded(edgeroi.grids) <- ~x+y
proj4string(edgeroi.grids) <- CRS("+init=epsg:28355")
## overlay points and grids:
ov2 <- over(edgeroi.spc, edgeroi.grids)
m2 <- cbind(ov2, edgeroi.spc@data)
m2$DEPTH <- m2$UHDICM + (m2$LHDICM - m2$UHDICM)/2
formulaStringP2 = ORCDRC ~ DEMSRT5+TWISRT5+PMTGEO5+EV1MOD5+EV2MOD5+EV3MOD5+DEPTH
mP2 <- m2[complete.cases(m2[,all.vars(formulaStringP2)]),]
test.ORC <- cv_numeric(formulaStringP2, rmatrix=mP2, nfold=5, idcol="SOURCEID", Log=TRUE) # method="h2o"
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
test.ORC <- cv_numeric(formulaStringP2, rmatrix=mP2, nfold=5, idcol="SOURCEID", Log=TRUE) # method="h2o"
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
test.ORC <- cv_numeric(formulaStringP2, rmatrix=mP2, nfold=5, idcol="SOURCEID", Log=TRUE) # method="h2o"
str(test.ORC)
plt0 <- xyplot(test.ORC[[1]]$Predicted~test.ORC[[1]]$Observed, asp=1, par.settings=list(plot.symbol = list(col=alpha("black", 0.6), fill=alpha("red", 0.6), pch=21, cex=0.9)), scales=list(x=list(log=TRUE, equispaced.log=FALSE), y=list(log=TRUE, equispaced.log=FALSE)), xlab="measured", ylab="predicted (machine learning)")
plt0 <- plt0 + layer(panel.abline(0,1,lty=1,lw=2,col="black"))
plt0
plt0 <- xyplot(test.ORC[[1]]$Predicted~test.ORC[[1]]$Observed, asp=1, par.settings=list(plot.symbol = list(col=alpha("black", 0.6), fill=alpha("red", 0.6), pch=21, cex=0.9)), scales=list(x=list(log=TRUE, equispaced.log=FALSE), y=list(log=TRUE, equispaced.log=FALSE)), xlab="measured", ylab="predicted (machine learning)")
plt0 <- plt0 + layer(panel.abline(0,1,lty=1,lw=2,col="black"))
library(sp)
library(randomForest)
library(nnet)
library(plotKML)
library(GSIF)
library(plyr)
library(ROCR)
library(snowfall)
library(mda)
library(psych)
library(hexbin)
library(gridExtra)
library(lattice)
library(grDevices)
library(h2o)
library(scales)
library(ranger)
library(xgboost)
library(caret)
library(doParallel)
plt0 <- plt0 + layer(panel.abline(0,1,lty=1,lw=2,col="black"))
d.meas <- min(test.ORC[[1]]$Observed, na.rm=TRUE)
pred <- test.ORC[[1]]$Predicted+ifelse(d.meas==0, 1, d.meas)
meas <- test.ORC[[1]]$Observed+ifelse(d.meas==0, 1, d.meas)
lim <- range(test.ORC[[1]]$Observed, na.rm=TRUE)
pfun <- function(x,y, ...){
panel.hexbinplot(x,y, ...)
panel.abline(0,1,lty=1,lw=2,col="black")
## To plot RMSE around the 1:1 line:
#panel.abline(0+test.ORC$Summary$logRMSE,1,lty=2,lw=2,col="black")
#panel.abline(0-test.ORC$Summary$logRMSE,1,lty=2,lw=2,col="black")
}
plt <- hexbinplot(pred~meas, colramp=colorRampPalette(R_pal[["bpy_colors"]][1:18]), main="Organic carbon in g/kg (accuracy assessment)", xlab="measured", ylab="predicted (ensemble)", type="g", lwd=1, lcex=8, inner=.2, cex.labels=.8, scales=list(x = list(log = 2, equispaced.log = FALSE), y = list(log = 2, equispaced.log = FALSE)), asp=1, xbins=25, density=40, xlim=lim, ylim=lim, panel=pfun)
plt
test.prop <- cv_numeric(formulaStringP, rmatrix=mP, nfold=5, idcol="ID", method="h2o")
h2o.init(nthreads = -1)
test.prop <- cv_numeric(formulaStringP, rmatrix=mP, nfold=5, idcol="ID", method="h2o")
str(test.prop)
test.prop <- cv_numeric(formulaStringP, rmatrix=mP, nfold=5, idcol="ID")
str(test.prop)
source('D:/git/SoilGrids250m/grids/cv/cv_functions.R')
test.ORC <- cv_numeric(formulaStringP2, rmatrix=mP2, nfold=5, idcol="SOURCEID", Log=TRUE)
str(test.ORC)
plt0 <- xyplot(test.ORC[[1]]$Predicted~test.ORC[[1]]$Observed, asp=1, par.settings=list(plot.symbol = list(col=alpha("black", 0.6), fill=alpha("red", 0.6), pch=21, cex=0.9)), scales=list(x=list(log=TRUE, equispaced.log=FALSE), y=list(log=TRUE, equispaced.log=FALSE)), xlab="measured", ylab="predicted (machine learning)")
plt0 <- plt0 + layer(panel.abline(0,1,lty=1,lw=2,col="black"))
plt0
d.meas <- min(test.ORC[[1]]$Observed, na.rm=TRUE)
pred <- test.ORC[[1]]$Predicted+ifelse(d.meas==0, 1, d.meas)
meas <- test.ORC[[1]]$Observed+ifelse(d.meas==0, 1, d.meas)
lim <- range(test.ORC[[1]]$Observed, na.rm=TRUE)
## Correlation plot:
pfun <- function(x,y, ...){
panel.hexbinplot(x,y, ...)
panel.abline(0,1,lty=1,lw=2,col="black")
## To plot RMSE around the 1:1 line:
#panel.abline(0+test.ORC$Summary$logRMSE,1,lty=2,lw=2,col="black")
#panel.abline(0-test.ORC$Summary$logRMSE,1,lty=2,lw=2,col="black")
}
plt <- hexbinplot(pred~meas, colramp=colorRampPalette(R_pal[["bpy_colors"]][1:18]), main="Organic carbon in g/kg (accuracy assessment)", xlab="measured", ylab="predicted (ensemble)", type="g", lwd=1, lcex=8, inner=.2, cex.labels=.8, scales=list(x = list(log = 2, equispaced.log = FALSE), y = list(log = 2, equispaced.log = FALSE)), asp=1, xbins=25, density=40, xlim=lim, ylim=lim, panel=pfun)
plt
h2o.shutdown()
test.ORC <- cv_numeric(formulaStringP2, rmatrix=mP2, nfold=5, idcol="SOURCEID", Log=TRUE)
str(test.ORC)
m <- readRDS("H:\\NASIS\\NA_066_042\\TAXgg_NA_066_042_rf1.rds")
str(m)
head(m)
rm(m)
gc()
gc()
test.ORC <- cv_numeric(formulaStringP2, rmatrix=mP2, nfold=5, idcol="SOURCEID", Log=TRUE)
x=5;y=c(3,4,5)
x=y*2
list(x,y)
library(sp)
library(randomForest)
library(nnet)
library(plotKML)
library(GSIF)
library(plyr)
library(ROCR)
library(snowfall)
library(mda)
library(psych)
library(hexbin)
library(gridExtra)
library(lattice)
library(grDevices)
library(h2o)
library(scales)
library(ranger)
library(xgboost)
library(caret)
library(doParallel)
source("cv_functions.R")
## load the data
set.seed(42)
data(eberg)
data(eberg_grid)
coordinates(eberg) <- ~X+Y
proj4string(eberg) <- CRS("+init=epsg:31467")
gridded(eberg_grid) <- ~x+y
proj4string(eberg_grid) <- CRS("+init=epsg:31467")
eberg_spc <- spc(eberg_grid, ~ PRMGEO6+DEMSRT6+TWISRT6+TIRAST6)
eberg_grid@data <- cbind(eberg_grid@data, eberg_spc@predicted@data)
## overlay points and grids:
ov <- over(eberg, eberg_grid)
m <- cbind(ov, eberg@data)
xg = summary(m$TAXGRSC, maxsum=length(levels(m$TAXGRSC)))
selg.levs = attr(xg, "names")[xg > 5]
m$soiltype <- m$TAXGRSC
m$soiltype[which(!m$TAXGRSC %in% selg.levs)] <- NA
m$soiltype <- droplevels(m$soiltype)
summary(m$soiltype)
cov.lst <- paste0("PC", 1:11)
formulaString = as.formula(paste('soiltype ~ ', paste(cov.lst, collapse="+")))
m <- m[complete.cases(m[,all.vars(formulaString)]),]
test.CLASS <- cv_factor(formulaString, rmatrix=m, nfold=5, idcol="ID")
data(edgeroi)
edgeroi.spc <- join(edgeroi$sites, edgeroi$horizons, type='inner')
coordinates(edgeroi.spc) <- ~ LONGDA94 + LATGDA94
proj4string(edgeroi.spc) <- CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs")
edgeroi.spc <- spTransform(edgeroi.spc, CRS("+init=epsg:28355"))
## load the 250 m grids:
con <- url("http://gsif.isric.org/lib/exe/fetch.php?media=edgeroi.grids.rda")
load(con)
gridded(edgeroi.grids) <- ~x+y
proj4string(edgeroi.grids) <- CRS("+init=epsg:28355")
## overlay points and grids:
ov2 <- over(edgeroi.spc, edgeroi.grids)
m2 <- cbind(ov2, edgeroi.spc@data)
m2$DEPTH <- m2$UHDICM + (m2$LHDICM - m2$UHDICM)/2
formulaStringP2 = ORCDRC ~ DEMSRT5+TWISRT5+PMTGEO5+EV1MOD5+EV2MOD5+EV3MOD5+DEPTH
mP2 <- m2[complete.cases(m2[,all.vars(formulaStringP2)]),]
test.ORC <- cv_numeric(formulaStringP2, rmatrix=mP2, nfold=5, idcol="SOURCEID", Log=TRUE)
str(test.ORC)
## Plot CV results (use log-scale):
plt0 <- xyplot(test.ORC[[1]]$Predicted~test.ORC[[1]]$Observed, asp=1, par.settings=list(plot.symbol = list(col=alpha("black", 0.6), fill=alpha("red", 0.6), pch=21, cex=0.9)), scales=list(x=list(log=TRUE, equispaced.log=FALSE), y=list(log=TRUE, equispaced.log=FALSE)), xlab="measured", ylab="predicted (machine learning)")
#plt0 <- plt0 + layer(panel.abline(0,1,lty=1,lw=2,col="black"))
plt0
test.CLASS[["Purity"]]
test.CLASS[["Classes"]]
test.CLASS[["Confusion.matrix"]]
plt0 <- plt0 + layer(panel.abline(0,1,lty=1,lw=2,col="black"))
plt0 <- xyplot(test.ORC[[1]]$Predicted~test.ORC[[1]]$Observed, asp=1, par.settings=list(plot.symbol = list(col=alpha("black", 0.6), fill=alpha("red", 0.6), pch=21, cex=0.9)), scales=list(x=list(log=TRUE, equispaced.log=FALSE), y=list(log=TRUE, equispaced.log=FALSE)), xlab="measured", ylab="predicted (machine learning)")
plt0 <- plt0 + layer(panel.abline(0,1,lty=1,lw=2,col="black"))
plt0
## Hexbin plot
d.meas <- min(test.ORC[[1]]$Observed, na.rm=TRUE)
pred <- test.ORC[[1]]$Predicted+ifelse(d.meas==0, 1, d.meas)
meas <- test.ORC[[1]]$Observed+ifelse(d.meas==0, 1, d.meas)
lim <- range(test.ORC[[1]]$Observed, na.rm=TRUE)
## Correlation plot:
pfun <- function(x,y, ...){
panel.hexbinplot(x,y, ...)
panel.abline(0,1,lty=1,lw=2,col="black")
## To plot RMSE around the 1:1 line:
#panel.abline(0+test.ORC$Summary$logRMSE,1,lty=2,lw=2,col="black")
#panel.abline(0-test.ORC$Summary$logRMSE,1,lty=2,lw=2,col="black")
}
plt <- hexbinplot(pred~meas, colramp=colorRampPalette(R_pal[["bpy_colors"]][1:18]), main="Organic carbon in g/kg (accuracy assessment)", xlab="measured", ylab="predicted (ensemble)", type="g", lwd=1, lcex=8, inner=.2, cex.labels=.8, scales=list(x = list(log = 2, equispaced.log = FALSE), y = list(log = 2, equispaced.log = FALSE)), asp=1, xbins=25, density=40, xlim=lim, ylim=lim, panel=pfun)
plt
